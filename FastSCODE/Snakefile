import os

rule TENET_Input:
    input:
        input="user/{user_name}/data/{input.h5ad}"
    output:
        expression="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/expression.csv",
        trajectory="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/trajectory.txt",
        cellSelect="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/cellSelect.txt"
    params:
        geneList=lambda wildcards: "user/{user_name}/data/{geneList.txt}" if os.path.exists("user/{user_name}/data/{geneList.txt}") else "None",
        ScatterPlot=lambda wildcards: {ScatterPlot} if os.path.exists({ScatterPlot}) else "None",
        cell_group={cell group},
        pseudotime={pseudotime},
        clusters=lambda wc: ";".join({clusters})
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/TENET_Input.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/TENET_Input.stderr"
    shell:
        "/opt/conda/envs/snakemake/bin/python /app/plugin/{plugin_name}/scripts/tenet_input.py {input.input} {params.geneList} {params.ScatterPlot} {output.expression} {output.trajectory} {output.cellSelect} {params.cell_group} {params.pseudotime} '{params.clusters}' > {log.stdout} 2> {log.stderr}"

rule Run:
    input:
        expression="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/expression.csv",
        trajectory="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/trajectory.txt",
        cellSelect="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/cellSelect.txt"
    output:
        GRN="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/GRN.sif",
        GRNOutdegree="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/GRNOutdegree.txt",
        GRNTrim="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/GRNTrim.sif",
        GRNTrimOutdegree="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/GRNTrimOutdegree.txt"
    params:
        sampling_length={sampling length},
        max_iteration={max iteration},
        backend={backend},
        number_of_devices={number of devices},
        sampling_batch_size={sampling batch size},
        gene_batch_size={gene batch size},
        num_repeat={num repeat},
        number_of_outdegrees={number of outdegrees},
        trim_threshold={trim threshold}
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Run.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Run.stderr"
    shell:
        "/opt/conda/envs/snakemake/bin/python /app/plugin/{plugin_name}/scripts/scode_for_cellcraft.py {input.expression} {input.trajectory} {input.cellSelect} {params.sampling_length} {params.max_iteration} {params.backend} {params.number_of_devices} {params.sampling_batch_size} {params.gene_batch_size} {params.num_repeat} {params.number_of_outdegrees} {params.trim_threshold} {output.GRN} {output.GRNOutdegree} {output.GRNTrim} {output.GRNTrimOutdegree} > {log.stdout} 2> {log.stderr}"

