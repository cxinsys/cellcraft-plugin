import os

rule TENET_Input:
    input:
        input="user/{user_name}/data/{input.h5ad}"
    output:
        expression="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/expression.csv",
        trajectory="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/trajectory.txt",
        cellSelect="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/cellSelect.txt"
    params:
        geneList=lambda wildcards: "user/{user_name}/data/{geneList.txt}" if os.path.exists("user/{user_name}/data/{geneList.txt}") else "None",
        ScatterPlot=lambda wildcards: {ScatterPlot} if os.path.exists({ScatterPlot}) else "None",
        cell_group={cell group},
        pseudotime={pseudotime},
        clusters=lambda wc: ";".join({clusters})
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/TENET_Input.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/TENET_Input.stderr"
    shell:
        "/opt/micromamba/envs/plugin_env/bin/python plugin/TENET/scripts/tenet_input.py {input.input} {params.geneList} {params.ScatterPlot} {output.expression} {output.trajectory} {output.cellSelect} {params.cell_group} {params.pseudotime} '{params.clusters}' > {log.stdout} 2> {log.stderr}"

rule Run:
    input:
        expression="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/expression.csv",
        trajectory="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/trajectory.txt",
        cellSelect="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/cellSelect.txt"
    output:
        resultMatrix="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/resultMatrix.txt"
    params:
        TF=lambda wildcards: "user/{user_name}/data/{TF.txt}" if os.path.exists("user/{user_name}/data/{TF.txt}") else "None",
        number_of_devices={number of devices}
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Run.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Run.stderr"
    shell:
        "/opt/micromamba/envs/plugin_env/bin/python plugin/TENET/scripts/tenet_for_cellcraft.py {input.expression} {input.trajectory} {input.cellSelect} {params.TF} {output.resultMatrix} {params.number_of_devices} > {log.stdout} 2> {log.stderr}"

rule GRN_Reconstruction__FDR:
    input:
        resultMatrix="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/resultMatrix.txt"
    output:
        Fdr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/Fdr.sif"
    params:
        FDR={FDR}
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/GRN_Reconstruction__FDR.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/GRN_Reconstruction__FDR.stderr"
    shell:
        "/opt/micromamba/envs/plugin_env/bin/python plugin/TENET/scripts/makeGRN.py {params.FDR} {input.resultMatrix} {output.Fdr} > {log.stdout} 2> {log.stderr}"

rule GRN_Reconstruction__NumLinks:
    input:
        resultMatrix="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/resultMatrix.txt"
    output:
        Numlinks="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/Numlinks.sif"
    params:
        number_of_outdegrees={number of outdegrees}
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/GRN_Reconstruction__NumLinks.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/GRN_Reconstruction__NumLinks.stderr"
    shell:
        "/opt/micromamba/envs/plugin_env/bin/python plugin/TENET/scripts/makeGRNsameNumberOfLinks.py {params.number_of_outdegrees} {input.resultMatrix} {output.Numlinks} > {log.stdout} 2> {log.stderr}"

rule Indirect_Edge_Trimming:
    input:
        Fdr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/Fdr.sif",
        Numlinks="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/Numlinks.sif"
    output:
        FdrTrim="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/FdrTrim.sif",
        NumlinksTrim="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/NumlinksTrim.sif"
    params:
        trimming_threshold={trimming threshold}
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Indirect_Edge_Trimming.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Indirect_Edge_Trimming.stderr"
    shell:
        "/opt/micromamba/envs/plugin_env/bin/python plugin/TENET/scripts/trim_indirect.py {input.Fdr} {input.Numlinks} {output.FdrTrim} {output.NumlinksTrim} {params.trimming_threshold} > {log.stdout} 2> {log.stderr}"

rule Counting_Outdegree:
    input:
        Fdr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/Fdr.sif",
        Numlinks="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/Numlinks.sif",
        FdrTrim="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/FdrTrim.sif",
        NumlinksTrim="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/NumlinksTrim.sif"
    output:
        FdrOutdegree="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/FdrOutdegree.txt",
        NumlinksOutdegree="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/NumlinksOutdegree.txt",
        FdrTrimOutdegree="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/FdrTrimOutdegree.txt",
        NumlinksTrimOutdegree="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/NumlinksTrimOutdegree.txt"
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Counting_Outdegree.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Counting_Outdegree.stderr"
    shell:
        "/opt/micromamba/envs/plugin_env/bin/python plugin/TENET/scripts/countOutdegree.py {input.Fdr} {input.Numlinks} {input.FdrTrim} {input.NumlinksTrim} {output.FdrOutdegree} {output.NumlinksOutdegree} {output.FdrTrimOutdegree} {output.NumlinksTrimOutdegree} > {log.stdout} 2> {log.stderr}"

