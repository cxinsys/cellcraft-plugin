import os

rule Barplot:
    input:
        target="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/{target.sif}"
    output:
        output="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/{visualization_result_path}Barplot.json"
    params:
        Top_Genes={Top Genes}
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Barplot.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Barplot.stderr"
    shell:
        "/opt/conda/envs/snakemake/bin/python /app/plugin/{plugin_name}/scripts/Barplot.py {input.target} {output.output} {params.Top_Genes} > {log.stdout} 2> {log.stderr}"

rule Heatmap:
    input:
        expression="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/expression.csv",
        trajectory="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/trajectory.txt",
        target="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/{target.sif}"
    output:
        output="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/{visualization_result_path}Heatmap.json"
    params:
        Top_Genes={Top Genes},
        Sample_Size={Sample Size}
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Heatmap.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Heatmap.stderr"
    shell:
        "/usr/bin/Rscript /app/plugin/{plugin_name}/scripts/Pseudotime_heatmap.R {input.expression} {input.trajectory} {input.target} {output.output} {params.Top_Genes} {params.Sample_Size} > {log.stdout} 2> {log.stderr}"

rule Network:
    input:
        target="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/{target.sif}"
    output:
        output="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/{visualization_result_path}Network.json"
    params:
        Top_Genes={Top Genes}
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Network.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Network.stderr"
    shell:
        "/opt/conda/envs/snakemake/bin/python /app/plugin/{plugin_name}/scripts/NetworkX.py {input.target} {output.output} {params.Top_Genes} > {log.stdout} 2> {log.stderr}"

