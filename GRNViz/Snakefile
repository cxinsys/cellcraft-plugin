import os

rule Heatmap:
    input:
        expression="user/{user_name}/data/{expression.csv}",
        trajectory="user/{user_name}/data/{trajectory.txt}",
        input="user/{user_name}/data/{input.txt}"
    output:
        Heatmap="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/Heatmap.json"
    params:
        Top_Genes={Top Genes},
        Sample_Size={Sample Size}
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Heatmap.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Heatmap.stderr"
    shell:
        "export R_LIBS_USER=/workspace/dependency/renv/library/linux-debian-bullseye/R-4.4/x86_64-conda-linux-gnu:/opt/micromamba/envs/plugin_env/lib/R/library && export R_HOME=/opt/micromamba/envs/plugin_env/lib/R && export RENV_CONFIG_AUTOLOADER_ENABLED=FALSE && /opt/micromamba/envs/plugin_env/bin/Rscript plugin/GRNViz/scripts/Pseudotime_heatmap.R {input.expression} {input.trajectory} {input.input} {output.Heatmap} {params.Top_Genes} {params.Sample_Size} > {log.stdout} 2> {log.stderr}"

rule Barplot:
    input:
        input="user/{user_name}/data/{input.txt}"
    output:
        Barplot="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/Barplot.json"
    params:
        Top_Genes={Top Genes}
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Barplot.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Barplot.stderr"
    shell:
        "/opt/micromamba/envs/plugin_env/bin/python plugin/GRNViz/scripts/Barplot.py {input.input} {output.Barplot} {params.Top_Genes} > {log.stdout} 2> {log.stderr}"

rule Network:
    input:
        input="user/{user_name}/data/{input.txt}"
    output:
        Network="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/results/Network.json"
    params:
        Top_Genes={Top Genes}
    log:
        stdout="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Network.stdout",
        stderr="user/{user_name}/workflow_{workflow_id}/algorithm_{algorithm_id}/logs/Network.stderr"
    shell:
        "/opt/micromamba/envs/plugin_env/bin/python plugin/GRNViz/scripts/NetworkX.py {input.input} {output.Network} {params.Top_Genes} > {log.stdout} 2> {log.stderr}"

